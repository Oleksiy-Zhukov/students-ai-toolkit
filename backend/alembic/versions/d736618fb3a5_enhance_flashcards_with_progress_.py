"""enhance_flashcards_with_progress_tracking

Revision ID: d736618fb3a5
Revises: add_username_field
Create Date: 2025-08-16 12:09:44.047803

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d736618fb3a5"
down_revision: Union[str, None] = "add_username_field"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "flashcards", sa.Column("tags", postgresql.ARRAY(sa.String()), nullable=True)
    )
    op.add_column("flashcards", sa.Column("review_count", sa.Integer(), nullable=True))
    op.add_column("flashcards", sa.Column("mastery_level", sa.Integer(), nullable=True))
    op.add_column(
        "flashcards", sa.Column("last_performance", sa.Integer(), nullable=True)
    )
    op.add_column(
        "flashcards", sa.Column("flashcard_type", sa.String(length=50), nullable=True)
    )
    op.add_column(
        "flashcards",
        sa.Column("context_notes", postgresql.ARRAY(sa.UUID()), nullable=True),
    )
    op.add_column(
        "flashcards", sa.Column("user_answer_history", sa.JSON(), nullable=True)
    )
    op.add_column("flashcards", sa.Column("user_id", sa.UUID(), nullable=True))

    # Set default values for existing flashcards
    op.execute("UPDATE flashcards SET review_count = 0 WHERE review_count IS NULL")
    op.execute("UPDATE flashcards SET mastery_level = 0 WHERE mastery_level IS NULL")
    op.execute(
        "UPDATE flashcards SET flashcard_type = 'single_note' WHERE flashcard_type IS NULL"
    )

    # For existing flashcards, we need to get user_id from the related note
    # This assumes each flashcard has a note_id that links to a note with a user_id
    op.execute("""
        UPDATE flashcards 
        SET user_id = notes.user_id 
        FROM notes 
        WHERE flashcards.note_id = notes.id 
        AND flashcards.user_id IS NULL
    """)

    # Now make user_id non-nullable
    op.alter_column("flashcards", "user_id", nullable=False)

    # Create foreign key constraint
    op.create_foreign_key(None, "flashcards", "users", ["user_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "flashcards", type_="foreignkey")
    op.drop_column("flashcards", "user_id")
    op.drop_column("flashcards", "user_answer_history")
    op.drop_column("flashcards", "context_notes")
    op.drop_column("flashcards", "flashcard_type")
    op.drop_column("flashcards", "last_performance")
    op.drop_column("flashcards", "mastery_level")
    op.drop_column("flashcards", "review_count")
    op.drop_column("flashcards", "tags")
    # ### end Alembic commands ###
